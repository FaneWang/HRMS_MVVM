//------------------------------------------------------------------------------
// <auto-generated>
//     此代码由工具生成。
//     运行时版本:4.0.30319.42000
//
//     对此文件的更改可能会导致不正确的行为，并且如果
//     重新生成代码，这些更改将会丢失。
// </auto-generated>
//------------------------------------------------------------------------------

namespace HRMS_MVVM.ServiceProxy {
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="ServiceProxy.IServiceTest")]
    public interface IServiceTest {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceTest/SayingHello", ReplyAction="http://tempuri.org/IServiceTest/SayingHelloResponse")]
        string SayingHello(string name);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceTest/SayingHello", ReplyAction="http://tempuri.org/IServiceTest/SayingHelloResponse")]
        System.Threading.Tasks.Task<string> SayingHelloAsync(string name);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceTest/PicUpload", ReplyAction="http://tempuri.org/IServiceTest/PicUploadResponse")]
        string PicUpload(string picString);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceTest/PicUpload", ReplyAction="http://tempuri.org/IServiceTest/PicUploadResponse")]
        System.Threading.Tasks.Task<string> PicUploadAsync(string picString);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceTest/PicDownload", ReplyAction="http://tempuri.org/IServiceTest/PicDownloadResponse")]
        string PicDownload(string picName);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceTest/PicDownload", ReplyAction="http://tempuri.org/IServiceTest/PicDownloadResponse")]
        System.Threading.Tasks.Task<string> PicDownloadAsync(string picName);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceTest/PicDelete", ReplyAction="http://tempuri.org/IServiceTest/PicDeleteResponse")]
        bool PicDelete(string picName);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceTest/PicDelete", ReplyAction="http://tempuri.org/IServiceTest/PicDeleteResponse")]
        System.Threading.Tasks.Task<bool> PicDeleteAsync(string picName);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IServiceTestChannel : HRMS_MVVM.ServiceProxy.IServiceTest, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class ServiceTestClient : System.ServiceModel.ClientBase<HRMS_MVVM.ServiceProxy.IServiceTest>, HRMS_MVVM.ServiceProxy.IServiceTest {
        
        public ServiceTestClient() {
        }
        
        public ServiceTestClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public ServiceTestClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public ServiceTestClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public ServiceTestClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public string SayingHello(string name) {
            return base.Channel.SayingHello(name);
        }
        
        public System.Threading.Tasks.Task<string> SayingHelloAsync(string name) {
            return base.Channel.SayingHelloAsync(name);
        }
        
        public string PicUpload(string picString) {
            return base.Channel.PicUpload(picString);
        }
        
        public System.Threading.Tasks.Task<string> PicUploadAsync(string picString) {
            return base.Channel.PicUploadAsync(picString);
        }
        
        public string PicDownload(string picName) {
            return base.Channel.PicDownload(picName);
        }
        
        public System.Threading.Tasks.Task<string> PicDownloadAsync(string picName) {
            return base.Channel.PicDownloadAsync(picName);
        }
        
        public bool PicDelete(string picName) {
            return base.Channel.PicDelete(picName);
        }
        
        public System.Threading.Tasks.Task<bool> PicDeleteAsync(string picName) {
            return base.Channel.PicDeleteAsync(picName);
        }
    }
}
